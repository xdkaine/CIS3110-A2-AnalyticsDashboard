/**
 * E-Commerce Analytics Dashboard - Insights UI Component
 * 
 * This file contains the UI components for displaying data insights
 * and recommendations generated by the InsightsEngine.
 */

class InsightsUI {
    constructor(containerId = 'insights-container') {
        this.containerId = containerId;
        this.container = document.getElementById(containerId);
        this.insights = [];
        this.categoryIcons = {
            critical: 'bi-exclamation-triangle-fill text-danger',
            opportunity: 'bi-lightbulb-fill text-success',
            trend: 'bi-graph-up-arrow text-info',
            performance: 'bi-speedometer2 text-primary',
            anomaly: 'bi-question-diamond-fill text-warning'
        };
        this.categoryTitles = {
            critical: 'Needs Attention',
            opportunity: 'Growth Opportunities',
            trend: 'Emerging Trends',
            performance: 'Performance Insights',
            anomaly: 'Unusual Patterns'
        };
    }

    /**
     * Initialize the insights UI with data from the insights engine
     */
    initialize(insightsData) {
        this.insights = insightsData;
        this.renderInsights();
        this.initializeEventListeners();
    }

    /**
     * Render all insights to the container
     */
    renderInsights() {
        if (!this.container) {
            console.error(`Container with ID "${this.containerId}" not found`);
            return;
        }

        // Clear existing content
        this.container.innerHTML = '';

        // Create insights dashboard structure
        const dashboardHtml = `
            <div class="insights-dashboard">
                <div class="insights-header">
                    <h4 class="section-title" data-aos="fade-right">
                        <i class="bi bi-graph-up text-secondary me-2"></i>
                        Business Insights & Recommendations
                    </h4>
                    <div class="insights-filters mb-4">
                        <div class="btn-group" role="group" aria-label="Insight filters">
                            <button type="button" class="btn btn-sm btn-outline-secondary active" data-filter="all">
                                All Insights <span class="badge bg-secondary ms-1">${this.insights.length}</span>
                            </button>
                            <button type="button" class="btn btn-sm btn-outline-danger" data-filter="critical">
                                Critical <span class="badge bg-danger ms-1">${this.countByCategory('critical')}</span>
                            </button>
                            <button type="button" class="btn btn-sm btn-outline-success" data-filter="opportunity">
                                Opportunities <span class="badge bg-success ms-1">${this.countByCategory('opportunity')}</span>
                            </button>
                            <button type="button" class="btn btn-sm btn-outline-info" data-filter="trend">
                                Trends <span class="badge bg-info ms-1">${this.countByCategory('trend')}</span>
                            </button>
                            <button type="button" class="btn btn-sm btn-outline-primary" data-filter="performance">
                                Performance <span class="badge bg-primary ms-1">${this.countByCategory('performance')}</span>
                            </button>
                        </div>
                    </div>
                </div>
                
                <div class="insights-content">
                    <div class="row" id="insights-grid">
                        <!-- Insights cards will be rendered here -->
                        ${this.renderTopInsights()}
                    </div>
                </div>
            </div>
        `;

        this.container.innerHTML = dashboardHtml;
    }

    /**
     * Render the top insights as highlighted cards
     */
    renderTopInsights() {
        // Sort insights by impact score
        const sortedInsights = [...this.insights].sort((a, b) => b.impact - a.impact);
        
        // Take top insights for highlight display
        return sortedInsights.map(insight => this.renderInsightCard(insight)).join('');
    }

    /**
     * Render a single insight card
     */
    renderInsightCard(insight) {
        const icon = this.categoryIcons[insight.category] || 'bi-info-circle';
        const categoryLabel = this.categoryTitles[insight.category] || 'Insight';
        const impactClass = this.getImpactClass(insight.impact);
        const dataPointsHtml = insight.dataPoints.map(dp => 
            `<div class="insight-data-point">
                <span class="data-label">${dp.label}:</span>
                <span class="data-value">${dp.value}</span>
            </div>`
        ).join('');

        return `
            <div class="col-md-6 mb-4" data-category="${insight.category}" data-id="${insight.id}" data-aos="fade-up">
                <div class="card insight-card h-100">
                    <div class="card-body">
                        <div class="insight-category">
                            <i class="bi ${icon}"></i>
                            <span>${categoryLabel}</span>
                            <div class="impact-indicator ${impactClass}" title="Impact: ${insight.impact}/10">
                                <i class="bi bi-lightning-charge-fill"></i>
                                <span>${insight.impact}</span>
                            </div>
                        </div>
                        <h5 class="insight-title">${insight.title}</h5>
                        <p class="insight-description">${insight.description}</p>
                        <div class="insight-data-points">
                            ${dataPointsHtml}
                        </div>
                        <div class="insight-divider"></div>
                        <div class="recommendation">
                            <h6><i class="bi bi-check2-circle"></i> Recommendation</h6>
                            <p>${insight.recommendation}</p>
                        </div>
                    </div>
                </div>
            </div>
        `;
    }

    /**
     * Get a CSS class based on impact score
     */
    getImpactClass(impact) {
        if (impact >= 8) return 'impact-high';
        if (impact >= 5) return 'impact-medium';
        return 'impact-low';
    }

    /**
     * Count insights by category
     */
    countByCategory(category) {
        return this.insights.filter(insight => insight.category === category).length;
    }

    /**
     * Initialize event listeners for filters, etc.
     */
    initializeEventListeners() {
        // Handle insight filtering
        const filterButtons = document.querySelectorAll('.insights-filters button[data-filter]');
        
        filterButtons.forEach(button => {
            button.addEventListener('click', (e) => {
                // Update active state on buttons
                filterButtons.forEach(btn => btn.classList.remove('active'));
                button.classList.add('active');
                
                // Get the filter value
                const filter = button.getAttribute('data-filter');
                
                // Filter insights
                const insightCards = document.querySelectorAll('#insights-grid [data-category]');
                
                insightCards.forEach(card => {
                    if (filter === 'all' || card.getAttribute('data-category') === filter) {
                        card.style.display = 'block';
                    } else {
                        card.style.display = 'none';
                    }
                });
            });
        });
    }
}

// Export the InsightsUI class for use in the main dashboard
if (typeof module !== 'undefined' && module.exports) {
    module.exports = { InsightsUI };
} else {
    // For browser use
    window.InsightsUI = InsightsUI;
}